<#
.SYNOPSIS
    This script combines the multi-file "Ahmaddxb Windows Customiser" project
    into a single, distributable PowerShell script.
#>

# --- SCRIPT CONFIGURATION ---
$PSScriptRoot = Get-Location
$OutputDirectory = Join-Path -Path $PSScriptRoot -ChildPath "dist"
$OutputFileName = "Ahmaddxb-Customiser-SingleFile.ps1"
$OutputFilePath = Join-Path -Path $OutputDirectory -ChildPath $OutputFileName

Write-Host "Starting build process..." -ForegroundColor Green

# --- 1. Create the output directory if it doesn't exist ---
if (-not (Test-Path -Path $OutputDirectory)) {
    Write-Host "Creating output directory: $OutputDirectory"
    New-Item -ItemType Directory -Path $OutputDirectory | Out-Null
}

# --- 2. Define the exact order to combine the files ---
$filesToCombine = @(
    "config/RemoveApps.config.ps1",
    "config/WindowsTweaks.config.ps1",
    "config/InstallApps.config.ps1",
    "functions/Backup.functions.ps1",
    "functions/App-Removal.functions.ps1",
    "functions/Tweak-Checks.functions.ps1",
    "functions/App-Install.functions.ps1",
    "tabs/Tab.RemoveApps.ps1",
    "tabs/Tab.WindowsTweaks.ps1",
    "tabs/Tab.InstallApps.ps1",
    "tabs/Tab.Backup.ps1"
)

# --- 3. Start building the final script content ---
Write-Host "Combining script files..."
$combinedScriptContent = @"
#----------------------------------
#  Ahmaddxb Windows Customiser
#  Version: 1.0 - Single File Edition
#  This file was automatically generated by build.ps1
#----------------------------------
#requires -version 5.1
#requires -runasadministrator

if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    `$arguments = "& '" + `$myinvocation.mycommand.definition + "'"
    Start-Process powershell -Verb runAs -ArgumentList `$arguments
    break
}
"@

function Append-ScriptFile {
    param($RelativePath)
    $fullPath = Join-Path -Path $PSScriptRoot -ChildPath $RelativePath
    if (Test-Path $fullPath) {
        return "`n# --- From File: $RelativePath ---`n" + (Get-Content -Path $fullPath -Raw)
    } else {
        Write-Warning "File not found: $fullPath"; return ""
    }
}

# --- 4. Combine files in the correct order ---
$combinedScriptContent += Append-ScriptFile -RelativePath "config/RemoveApps.config.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "config/WindowsTweaks.config.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "config/InstallApps.config.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "functions/Backup.functions.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "functions/App-Removal.functions.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "functions/Tweak-Checks.functions.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "functions/App-Install.functions.ps1"

$combinedScriptContent += @"

#==================================================================
# FORM AND UI CREATION
#==================================================================
Add-Type -AssemblyName System.Windows.Forms
`$form = New-Object System.Windows.Forms.Form; `$form.Text = 'Ahmaddxb Windows Customiser'; `$form.Size = New-Object System.Drawing.Size(500, 850); `$form.StartPosition = 'CenterScreen'; `$form.FormBorderStyle = 'Sizable'; `$form.Font = New-Object System.Drawing.Font('Segoe UI', 9)
`$tabControl = New-Object System.Windows.Forms.TabControl; `$tabControl.Dock = [System.Windows.Forms.DockStyle]::Fill; `$form.Controls.Add(`$tabControl)
"@

$combinedScriptContent += Append-ScriptFile -RelativePath "tabs/Tab.RemoveApps.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "tabs/Tab.WindowsTweaks.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "tabs/Tab.InstallApps.ps1"
$combinedScriptContent += Append-ScriptFile -RelativePath "tabs/Tab.Backup.ps1"

$combinedScriptContent += @"

#==================================================================
# SHOW FORM
#==================================================================
`$form.ShowDialog() | Out-Null
"@

# --- 5. Write the combined content to the output file ---
try {
    # CORRECTED: Use an encoding that does not write a Byte Order Mark (BOM)
    $encoding = New-Object System.Text.UTF8Encoding($false)
    [System.IO.File]::WriteAllLines($OutputFilePath, $combinedScriptContent, $encoding)
    
    Write-Host "Build successful!" -ForegroundColor Green
    Write-Host "Combined script created at: $OutputFilePath"
}
catch {
    Write-Error "Failed to write the output file: $($_.Exception.Message)"
}
